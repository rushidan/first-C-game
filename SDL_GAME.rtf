{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.16299}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 #include <stdio.h>\par
#include <stdlib.h>\par
#include <SDL2/SDL.h>\par
#include <SDL2/SDL_image.h>\par
#include <time.h>\par
\par
#define GRAVITY 0.32\par
\par
typedef struct\par
\{\par
    double x, y, w, h;\par
    double dx, dy;\par
    short life;\par
    char *name;\par
    int onLedge;\par
\par
    int animFrame;\par
    int facingRight;\par
\}Man;\par
\par
typedef struct\par
\{\par
    int x,y;\par
\}Ball;\par
\par
typedef struct\par
\{\par
    double x,y,w,h;\par
\}Ledge;\par
\par
typedef struct\par
\{\par
    Man man;\par
    Ball balls[100];\par
    Ledge ledges[100];\par
\par
    SDL_Texture *angryBall;\par
    SDL_Texture *manFrames[4];\par
    SDL_Texture *brick;\par
    SDL_Renderer *renderer;\par
\par
    int time;\par
\}GameState;\par
\par
int processEvents(SDL_Window* window, GameState* game)\par
\{\par
    SDL_Event event;\par
    int done=0;\par
    while(SDL_PollEvent(&event))\par
        \{\par
            switch(event.type)\par
            \{\par
            case SDL_WINDOWEVENT_CLOSE:\par
                \{\par
                    if(window)\par
                    \{\par
                        SDL_DestroyWindow(window);\par
                        window=NULL;\par
                        done=1;\par
                    \}\par
                \}\par
            break;\par
            case SDL_KEYDOWN:\par
                \{\par
                    switch(event.key.keysym.sym)\par
                    \{\par
                    case SDLK_ESCAPE:\par
                        done=1;\par
                    break;\par
                    case SDLK_UP:  //basic or minimum jump\par
                        if(game->man.onLedge)\par
                        \{\par
                            game->man.dy = -8;\par
                            game->man.onLedge = 0;\par
                        \}\par
                    break;\par
                    /*case SDLK_RIGHT:\par
                        man->x += 10;\par
                    break;\par
                    case SDLK_LEFT:\par
                        man->x -= 10;\par
                    break;\par
                    case SDLK_UP:\par
                        man->y -= 10;\par
                    break;\par
                    case SDLK_DOWN:\par
                        man->y += 10;\par
                    break;*/\par
                    \}\par
                \}\par
            break;\par
            case SDL_QUIT:\par
                done=1;\par
            break;\par
            \}\par
        \}\par
        const Uint8 *state = SDL_GetKeyboardState(NULL);\par
        if(state[SDL_SCANCODE_RIGHT])\par
        \{\par
            game->man.facingRight = 1;\par
            //game->man.x += 10;\par
            game->man.dx += 0.8; //acceleration\par
            if(game->man.dx > 6)\par
                game->man.dx = 6; // max speed\par
        \}\par
        else if(state[SDL_SCANCODE_LEFT])\par
        \{\par
            game->man.facingRight = 0;\par
            //game->man.x -= 10;\par
            game->man.dx -= 0.8; //acceleration\par
            if(game->man.dx < -6)\par
                game->man.dx = -6;   //max speed\par
        \}\par
        else\par
        \{\par
            //game->man.animFrame = 0;\par
            game->man.dx *= 0.9; //friction\par
            if(abs(game->man.dx) < 0.1)\par
                game->man.dx = 0;\par
        \}\par
        if(state[SDL_SCANCODE_UP])\par
            game->man.dy -= 0.2; //more jump on holding\par
        /*if(state[SDL_SCANCODE_UP])\par
            game->man.y -= 10;\par
        if(state[SDL_SCANCODE_DOWN])\par
            game->man.y += 10;*/\par
        return done;\par
\}\par
\par
void process(GameState *game)\par
\{\par
    //add time:\par
    game->time++;\par
\par
    //movement:\par
    game->man.x += game->man.dx; //walking or running\par
    game->man.y += game->man.dy; //jumping\par
\par
    //animation:\par
    if(game->time % 8 == 0) //change animation after every 30 frames\par
    \{\par
        if(game->man.dx != 0 && game->man.onLedge)\par
        \{\par
            if(game->man.animFrame<3)\par
                game->man.animFrame++;\par
            else\par
                game->man.animFrame=0;\par
        \}\par
        else if(game->man.dx == 0 && game->man.onLedge)\par
            game->man.animFrame = 0;\par
    \}\par
\par
    if(!game->man.onLedge)\par
        game->man.dy += GRAVITY; //falling\par
\}\par
\par
void collisionDetect(GameState *game)\par
\{\par
    int i;\par
    double mx,my,mw,mh,bx,by,bw,bh;\par
    for(i=0;i<100;i++)\par
    \{\par
        if(game->man.animFrame == 0 || game->man.animFrame == 2)\par
        \{\par
            game->man.w = 13.0;\par
            game->man.h = 60.0;\par
        \}\par
        else\par
        \{\par
            game->man.w = 35.0;\par
            game->man.h = 60.0;\par
        \}\par
        mw=game->man.w;\par
        mh=game->man.h;\par
        mx=game->man.x, my=game->man.y;\par
        bx=game->ledges[i].x, by=game->ledges[i].y, bw=game->ledges[i].w, bh=game->ledges[i].h;\par
\par
        if((my+mh)>by && my<(by+bh) && game->man.dx != 0) //collision in the horizontal direction (PROBLEMATIC)\par
        \{\par
            //rubbing against right edge\par
            if(mx<(bx+bw) && (mx+mw)>(bx+bw) && game->man.dx<0)\par
            \{\par
                //correct x\par
                game->man.x = bx+bw;\par
                mx = bx+bw;\par
                game->man.dx = 0;\par
            \}\par
            //rubbing against left edge\par
            else if((mx+mw)>bx && mx<bx && game->man.dx>0)\par
            \{\par
                //correct x\par
                game->man.x = bx-mw;\par
                mx = bx-mw;\par
                game->man.dx = 0;\par
            \}\par
        \}\par
\par
        if((mx+mw)>bx && mx<(bx+bw)) //collision in the vertical direction\par
        \{\par
            //bumping head\par
            if(my<(by+bh) && my>by && game->man.dy<0)\par
            \{\par
                //correct y\par
                game->man.y = by+bh;\par
                my = by+bh;\par
                game->man.dy = 0; //bumping head, stop any jump velocity\par
                //game->man.onLedge = 0;\par
            \}\par
            //landing on ledge\par
            else if((my+mh)>=by && my<by)\par
            \{\par
                //correct y\par
                game->man.y = by-mh;\par
                my = by-mh;\par
                game->man.dy = 0; //landing on ledge, stop any jump velocity\par
                game->man.onLedge = 1;\par
            \}\par
            else if(my < by)\par
                game->man.onLedge = 0;\par
        \}\par
    \}\par
    //printf("%.15lf\\n%.15lf\\n%.15lf\\n%.15lf\\n%.15lf\\n%.15lf\\n%d\\n",mx,my,game->ledges[98].x,game->ledges[98].y,game->man.dx,game->man.dy,game->man.onLedge);\par
\}\par
\par
void doRender(SDL_Renderer* renderer, GameState* game)\par
\{\par
    //SDL_SetRenderDrawColor(renderer,i*2,i*4,i*8,255);\par
\par
    SDL_SetRenderDrawColor(renderer,128,0,255,50);\par
\par
    SDL_RenderClear(renderer);\par
\par
    /*SDL_SetRenderDrawColor(renderer,255,255,255,255);\par
\par
    SDL_Rect rect = \{game->man.x, game->man.y, 100, 100\};\par
    SDL_RenderFillRect(renderer, &rect);*/\par
\par
    int i;\par
    for(i=0;i<100;i++)\par
    \{\par
        SDL_Rect ledgeRect = \{game->ledges[i].x,game->ledges[i].y,game->ledges[i].w,game->ledges[i].h\};\par
        SDL_RenderCopy(renderer,game->brick,NULL,&ledgeRect);\par
    \}\par
\par
    if(game->man.animFrame == 0 || game->man.animFrame == 2)\par
        \{\par
            game->man.w = 13.0;\par
            game->man.h = 60.0;\par
        \}\par
        else\par
        \{\par
            game->man.w = 35.0;\par
            game->man.h = 60.0;\par
        \}\par
    SDL_Rect manRect = \{game->man.x, game->man.y, game->man.w, game->man.h\};\par
    SDL_RenderCopyEx(renderer,game->manFrames[game->man.animFrame],NULL,&manRect,0,NULL,(game->man.facingRight == 0));\par
    /*for(i=0; i<100; i++)\par
    \{\par
        SDL_Rect ballRect = \{game->balls[i].x,game->balls[i].y,64,64\};\par
        SDL_RenderCopy(renderer,game->angryBall,NULL,&ballRect);\par
    \}*/\par
\par
    /*SDL_Rect manRect = \{50,50,320,320\};\par
        SDL_RenderCopy(renderer,game->manDude,NULL,&manRect);*/\par
\par
    SDL_RenderPresent(renderer);\par
\}\par
\par
void loadGame(GameState* game)          //game initializer\par
\{\par
    SDL_Surface *surface = NULL;\par
    game->man.x = 320-8; //for centering : man.x = (window width/2) - (rectangle width/2)\par
    game->man.y = 240-30; //for centering : man.y = (window height/2) = (rectangle height/2)\par
    game->man.dx = 0;\par
    game->man.dy = 0;\par
    game->man.onLedge = 0;\par
    game->man.animFrame = 0;\par
    game->man.facingRight = 1;\par
\par
    game->time  = 0;\par
    surface=IMG_Load("angryball.png");\par
    if(surface==NULL)\par
    \{\par
        puts(SDL_GetError());\par
        printf("Couldn't load image\\n\\n");\par
        SDL_Quit();\par
        exit(1);\par
    \}\par
    game->angryBall=SDL_CreateTextureFromSurface(game->renderer, surface);\par
    SDL_FreeSurface(surface);\par
\par
    surface=IMG_Load("man0.png");\par
    if(surface==NULL)\par
    \{\par
        puts(SDL_GetError());\par
        printf("Couldn't load image\\n\\n");\par
        SDL_Quit();\par
        exit(1);\par
    \}\par
    game->manFrames[0]=SDL_CreateTextureFromSurface(game->renderer, surface);\par
    SDL_FreeSurface(surface);\par
\par
    surface=IMG_Load("man1.png");\par
    if(surface==NULL)\par
    \{\par
        puts(SDL_GetError());\par
        printf("Couldn't load image\\n\\n");\par
        SDL_Quit();\par
        exit(1);\par
    \}\par
    game->manFrames[1]=SDL_CreateTextureFromSurface(game->renderer, surface);\par
    SDL_FreeSurface(surface);\par
\par
    surface=IMG_Load("man2.png");\par
    if(surface==NULL)\par
    \{\par
        puts(SDL_GetError());\par
        printf("Couldn't load image\\n\\n");\par
        SDL_Quit();\par
        exit(1);\par
    \}\par
    game->manFrames[2]=SDL_CreateTextureFromSurface(game->renderer, surface);\par
    SDL_FreeSurface(surface);\par
\par
    surface=IMG_Load("man3.png");\par
    if(surface==NULL)\par
    \{\par
        puts(SDL_GetError());\par
        printf("Couldn't load image\\n\\n");\par
        SDL_Quit();\par
        exit(1);\par
    \}\par
    game->manFrames[3]=SDL_CreateTextureFromSurface(game->renderer, surface);\par
    SDL_FreeSurface(surface);\par
\par
    surface=IMG_Load("brick.png");\par
    if(surface==NULL)\par
    \{\par
        puts(SDL_GetError());\par
        printf("Couldn't load image\\n\\n");\par
        SDL_Quit();\par
        exit(1);\par
    \}\par
    game->brick=SDL_CreateTextureFromSurface(game->renderer, surface);\par
    SDL_FreeSurface(surface);\par
\par
    int i;\par
    srand(time(NULL));\par
    for(i=0;i<100;i++)\par
    \{\par
        game->balls[i].x = rand()%640;\par
        game->balls[i].y = rand()%480;\par
    \}\par
\par
    for(i=0;i<100;i++)\par
    \{\par
        game->ledges[i].w = 256.0;\par
        game->ledges[i].h = 64.0;\par
        game->ledges[i].x = i*256.0;\par
        game->ledges[i].y = 400.0;\par
    \}\par
    game->ledges[99].x = 350.0;\par
    game->ledges[99].y = 200.0;\par
    //game->ledges[98].x = 350.0;\par
    //game->ledges[98].y = 350.0;\par
\par
\}\par
int main(int argc, char* argv[])\par
\{\par
    //printf("Hello world!\\n");\par
    SDL_Window *window = NULL;\par
    SDL_Renderer *renderer = NULL;\par
\par
    GameState gameState;\par
\par
    SDL_Init(SDL_INIT_VIDEO);\par
\par
    window=SDL_CreateWindow("Game Window",\par
                            SDL_WINDOWPOS_UNDEFINED,\par
                            SDL_WINDOWPOS_UNDEFINED,\par
                            640,\par
                            480,\par
                            0\par
                            );\par
    renderer=SDL_CreateRenderer(window,-1,SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);\par
    gameState.renderer = renderer;\par
\par
    loadGame(&gameState);\par
\par
    int done=0;\par
\par
    while(!done)\par
    \{\par
\par
        done=processEvents(window, &gameState);\par
\par
        process(&gameState);\par
        collisionDetect(&gameState);\par
\par
        doRender(renderer, &gameState);\par
\par
        //SDL_Delay(42);\par
\par
    \}\par
\par
    SDL_DestroyTexture(gameState.angryBall);\par
    SDL_DestroyTexture(gameState.manFrames[0]);\par
    SDL_DestroyTexture(gameState.manFrames[1]);\par
    SDL_DestroyTexture(gameState.manFrames[2]);\par
    SDL_DestroyTexture(gameState.manFrames[3]);\par
    SDL_DestroyTexture(gameState.brick);\par
    SDL_DestroyWindow(window);\par
    SDL_DestroyRenderer(renderer);\par
\par
    SDL_Quit();\par
\par
    /*SDL_SetRenderDrawColor(renderer,128,0,255,255);\par
\par
    SDL_RenderClear(renderer);\par
\par
    SDL_SetRenderDrawColor(renderer,255,255,255,255);\par
\par
    SDL_Rect rect = \{220, 140, 200, 200\};\par
    SDL_RenderFillRect(renderer, &rect);\par
\par
    SDL_RenderPresent(renderer);\par
\par
    SDL_Delay(2000);\par
\par
    SDL_DestroyWindow(window);\par
    SDL_DestroyRenderer(renderer);\par
\par
    SDL_Quit();*/\par
    return 0;\par
\}\par
\par
}
 